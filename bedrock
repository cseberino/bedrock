#!/usr/bin/env python3
#
# Copyright 2020 Christian Seberino
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import re

ATOM = "[a-zA-Z]"

def is_atom(e):
        """
        Identifies.
        """

        return isinstance(e, str) and re.fullmatch(ATOM, e)

def is_def(e):
        """
        Identifies.
        """

        return isinstance(e, list) and (len(e) == 3) and (e[0] == "λ") and     \
                                              is_atom(e[1]) and is_valid(e[2])

def is_invoc(e):
        """
        Identifies.
        """

        return isinstance(e, list) and (len(e) == 2) and is_valid(e[0]) and    \
                                                                is_valid(e[1])

def is_valid(e):
        """
        Identifies.
        """

        return is_atom(e) or is_def(e) or is_invoc(e)

def new_atom(avoid):
        """
        Gets.
        """

        atom = "a"
        while True:
                if re.fullmatch(ATOM, atom) and (atom not in avoid):
                        break
                atom = chr(ord(atom) + 1)

        return atom

def rename_bound(e, avoid):
        """
        Renames.
        """

        if is_atom(e):
                result = e
        if is_def(e):
                if e[1] in avoid:
                        a      = new_atom(avoid + str(e))
                        result = [e[0], a, str(e[2]).replace(e[1], a)]
                        if not is_atom(result[2]):
                                result[2] = eval(result[2])
                else:
                        result = [e[0], e[1], rename_bound(e[2], avoid)]
        if is_invoc(e):
                result = [rename_bound(f, avoid) for f in e]

        return result

def replace_param(a, rep, e):
        """
        Replaces.
        """

        if   is_atom(e):
                if e == a:
                        result = rep
                else:
                        result = e
        elif is_def(e):
                if e[1] == a:
                        result = e
                else:
                        result = [e[0], e[1], replace_param(a, rep, e[2])]
        elif is_invoc(e):
                result = [replace_param(a, rep, f) for f in e]

        return result

def evaluate_invoc(e):
        """
        Helps.
        """

        result = [rename_bound(e[0], str(e[1])), e[1]]

        return evaluate(replace_param(result[0][1], result[1], result[0][2]))

def evaluate(e):
        """
        Evaluates.
        """

        if   is_atom(e):
                result = e
        elif is_def(e):
                result = [e[0], e[1], evaluate(e[2])]
        elif is_invoc(e):
                result = [evaluate(e[0]), evaluate(e[1])]
                if is_def(result[0]):
                        result = evaluate_invoc(result)

        return result

print(str(evaluate(eval(re.sub("([\wλ])", '"\\1"', input())))).replace("'", ""))
